#!/bin/bash

# Carregar vari√°veis do .env
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
fi

# Determinar modo (Produ√ß√£o/Desenvolvimento)
if [ "${NODE_ENV}" = "development" ]; then
    MODE_NAME="DESENVOLVIMENTO"
else
    MODE_NAME="PRODU√á√ÉO"
fi

echo "=========================================="
echo "   DATA-DRIVEN STORE - START DOCKER"
echo "=========================================="
echo "üéØ MODO ATIVO: $MODE_NAME"
echo "=========================================="
echo ""

API_SERVICE_NAME="dds_api"
DB_SERVICES="postgres mongo redis neo4j cassandra"

# 1. Limpeza seletiva (preserva dados do banco)
echo "üßπ 1. Parando e removendo container da API..."
docker compose stop "$API_SERVICE_NAME"
docker compose rm -f "$API_SERVICE_NAME"
echo "‚úÖ Limpeza seletiva finalizada."

# 2. Compilar o projeto TypeScript
echo "üì¶ 2. Compilando o projeto TypeScript..."
pnpm run build
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao compilar o projeto."
    exit 1
fi
echo "‚úÖ Projeto compilado."

# 3. Iniciar todos os servi√ßos
echo "üöÄ 3. Iniciando servi√ßos e reconstruindo a API..."
docker compose up -d --build --force-recreate "$API_SERVICE_NAME" $DB_SERVICES
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao subir os servi√ßos."
    exit 1
fi
echo "‚úÖ Servi√ßos iniciados."

# 4. Popular os bancos de dados
echo "üå± 4. Populando bancos de dados..."
./seed.sh
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao popular os bancos de dados."
    exit 1
fi

# --- MENSAGEM FINAL ---
echo ""
echo "üéâ AMBIENTE INICIADO COM SUCESSO! üéâ"
echo "üìã Verificando logs da API... (Pressione Ctrl+C para parar)"
echo ""
docker compose logs -f "$API_SERVICE_NAME"
#!/bin/bash

# Carregar vari√°veis do .env
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
fi

# Determinar modo (Produ√ß√£o/Desenvolvimento)
if [ "${NODE_ENV}" = "development" ]; then
    MODE_NAME="DESENVOLVIMENTO"
else
    MODE_NAME="PRODU√á√ÉO"
fi

echo "=========================================="
echo "   DATA-DRIVEN STORE - START DOCKER"
echo "=========================================="
echo "üéØ MODO ATIVO: $MODE_NAME"
echo "=========================================="
echo ""

API_SERVICE_NAME="dds_api"
DB_SERVICES="postgres mongo redis neo4j cassandra"

# 1. Limpeza seletiva (preserva dados do banco)
echo "üßπ 1. Parando e removendo container da API..."
docker compose stop "$API_SERVICE_NAME"
docker compose rm -f "$API_SERVICE_NAME"
echo "‚úÖ Limpeza seletiva finalizada."

# 2. Compilar o projeto TypeScript
echo "üì¶ 2. Compilando o projeto TypeScript..."
pnpm run build
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao compilar o projeto."
    exit 1
fi
echo "‚úÖ Projeto compilado."

# 3. Iniciar todos os servi√ßos
echo "üöÄ 3. Iniciando servi√ßos e reconstruindo a API..."
docker compose up -d --build --force-recreate "$API_SERVICE_NAME" $DB_SERVICES
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao subir os servi√ßos."
    exit 1
fi
echo "‚úÖ Servi√ßos iniciados."

# 4. Popular os bancos de dados
echo "üå± 4. Populando bancos de dados..."
./seed.sh
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao popular os bancos de dados."
    exit 1
fi

# --- MENSAGEM FINAL ---
echo ""
echo "üéâ AMBIENTE INICIADO COM SUCESSO! üéâ"
echo "üìã Verificando logs da API... (Pressione Ctrl+C para parar)"
echo ""
docker compose logs -f "$API_SERVICE_NAME"
#!/bin/bash

# Carregar vari√°veis do .env
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
fi

# Determinar modo (Produ√ß√£o/Desenvolvimento)
if [ "${NODE_ENV}" = "development" ]; then
    MODE_NAME="DESENVOLVIMENTO"
else
    MODE_NAME="PRODU√á√ÉO"
fi

echo "=========================================="
echo "   DATA-DRIVEN STORE - START DOCKER"
echo "=========================================="
echo "üéØ MODO ATIVO: $MODE_NAME"
echo "=========================================="
echo ""

API_SERVICE_NAME="dds_api"
DB_SERVICES="postgres mongo redis neo4j cassandra"

# 1. Limpeza seletiva (preserva dados do banco)
echo "üßπ 1. Parando e removendo container da API..."
docker compose stop "$API_SERVICE_NAME"
docker compose rm -f "$API_SERVICE_NAME"
echo "‚úÖ Limpeza seletiva finalizada."

# 2. Compilar o projeto TypeScript
echo "üì¶ 2. Compilando o projeto TypeScript..."
pnpm run build
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao compilar o projeto."
    exit 1
fi
echo "‚úÖ Projeto compilado."

# 3. Iniciar todos os servi√ßos
echo "üöÄ 3. Iniciando servi√ßos e reconstruindo a API..."
docker compose up -d --build --force-recreate "$API_SERVICE_NAME" $DB_SERVICES
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao subir os servi√ßos."
    exit 1
fi
echo "‚úÖ Servi√ßos iniciados."

# 4. Popular os bancos de dados
echo "üå± 4. Populando bancos de dados..."
./seed.sh
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Falha ao popular os bancos de dados."
    exit 1
fi

# --- MENSAGEM FINAL ---
echo ""
echo "üéâ AMBIENTE INICIADO COM SUCESSO! üéâ"
echo "üìã Verificando logs da API... (Pressione Ctrl+C para parar)"
echo ""
docker compose logs -f "$API_SERVICE_NAME"
