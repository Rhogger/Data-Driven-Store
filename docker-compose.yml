services:
  # PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/postgres:/docker-entrypoint-initdb.d
    networks:
      - datastore-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MongoDB
  mongo:
    image: mongo:6.0
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
      - ./db/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - ./db/mongodb/seed.js:/docker-entrypoint-initdb.d/seed.js:ro
    networks:
      - datastore-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - datastore-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Cassandra
  cassandra:
    image: cassandra:4.0
    container_name: cassandra_db
    ports:
      - '9042:9042'
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./db/cassandra:/docker-entrypoint-initdb.d
    environment:
      - CASSANDRA_CLUSTER_NAME=TestCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    networks:
      - datastore-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', "cqlsh -e 'DESCRIBE KEYSPACES' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Neo4j
  neo4j:
    image: neo4j:5.7
    container_name: neo4j_db
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: 'gds.*,apoc.*'
      NEO4J_dbms_security_procedures_allowlist: 'gds.*,apoc.*'
    ports:
      - '7474:7474'
      - '7687:7687'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./db/neo4j:/import
    networks:
      - datastore-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'cypher-shell', '-u', 'neo4j', '-p', '${NEO4J_PASSWORD}', 'RETURN 1']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  dds_api:
    build:
      context: .
      args:
        MODE: ${BUILD_MODE:-production}
    container_name: datadriven_api
    ports:
      - '${APP_PORT:-3000}:${APP_PORT:-3000}'
    env_file:
      - ./.env
    environment:
      PORT: ${APP_PORT:-3000}
      NODE_ENV: ${NODE_ENV:-development}
      DEV_MODE: ${DEV_MODE:-false}

      PG_USER: ${POSTGRES_USER}
      PG_PASSWORD: ${POSTGRES_PASSWORD}
      PG_DB: ${POSTGRES_DB}
      PG_HOST: postgres
      PG_PORT: 5432

      MONGODB_URI: ${MONGODB_URI}
      MONGODB_DATABASE: ${MONGODB_DATABASE}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}

      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}

      CASSANDRA_HOST: ${CASSANDRA_HOST}
      CASSANDRA_PORT: ${CASSANDRA_PORT}
      CASSANDRA_USER: ${CASSANDRA_USER}
      CASSANDRA_PASSWORD: ${CASSANDRA_PASSWORD}
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}

    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    networks:
      - datastore-network
    volumes:
      # Sempre monta o c√≥digo para hot reload
      - .:/app
      - /app/node_modules
    command: ['/bin/sh', './run.sh']
    restart: unless-stopped

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  cassandra_data:
  neo4j_data:
  neo4j_logs:

networks:
  datastore-network:
    driver: bridge
